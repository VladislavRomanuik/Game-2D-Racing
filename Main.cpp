// ---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Main.h"
#include "Game.h"
#include "ctime.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
// ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ - ИМЕЮТ ОБЛАСТЬ ВИДИМОСТИ В ЛЮБОЙ СТРОЧКЕ КОДА ЭТОГО ФАЙЛА, ТОЛЬКО ЭТОГО!!!!
TGameForm *GameForm; // указатель на форму
Game* game; // указатель на класс Game
bool game_ = false; // состояние игры / true -  играем / false - не играем
// переменная, которая показывает, когда спавниться машинке
bool nextCar = false;
bool lookBonus = false; // Переменная, что показывает - ПОКАЗЫВАТЬ ЛИ КАРТИНКУ БОНУСА НА ЭКРАН
int time_spown[2] = {0, 0}; // время спавна машинки, МАССИВ, первый элемент спавн для 2, второй для 1 машинки
int state[2] = {0, 0}; // состояния передвижения машинки, 0 - влево, 1 - вправо
int bonusSpown = 0; // счетчик спавна бонуса
int speedCar = 15; // скорость машинок и бонуса
int score = 0; // очки игрока
int countCarWin = 0;
// количество машин, который проехали (когда 2 вместе, считаем за одну)
int defaultScore = 0;
// вспомогательная переменная для записи машин, который проехали
int distanceByCar = 225; // расстояние между машинами
int countPlusSpeed = 50;

// ---------------------------------------------------------------------------
// КОНСТРУКТОР КЛАССА TFORM
__fastcall TGameForm::TGameForm(TComponent* Owner) : TForm(Owner) {
	// ВКЛЮЧАЕМ РАНДОМ
	srand(time(NULL));
	// ВКЛЮЧАЕМ РАНДОМ
	randomize();
}

// ---------------------------------------------------------------------------
// ФУНКЦИЯ КЛАССА
void __fastcall TGameForm::VisibleMainMenu()
{
	// ОТКРЫВАЕМ ВИДИМОСТЬ 3 кнопок
	BtnPlay->Visible = true; // ИГРАТЬ
	BtnDocument->Visible = true; // ДОКУМЕНТАЦИЯ
	BtnRegulations->Visible = true; // ПРАВИЛА
}
// ---------------------------------------------------------------------------
void __fastcall TGameForm::VisibleGameComponent()
{
	// ОТКРЫВАЕМ Видимость очков
	Image3->Visible = true;
	Label1->Visible = true;
	Label2->Visible = true;
	Label3->Visible = true;
}
// ФУНКЦИЯ КЛАССА
void __fastcall TGameForm::NOVisibleGameComponent()
{
	// ЗАКРЫВАЕМ Видимость очков
	Image3->Visible = false;
	Image5->Visible = false;
	Label1->Visible = false;
	Label2->Visible = false;
	Label3->Visible = false;
}

// ФУНКЦИЯ КЛАССА
void _fastcall TGameForm::VisibleGameOverMenu() {
	// ЗАКРЫВАЕМ ВИДИМОСТЬ 3 кнопок
	BtnPlay->Visible = false; // ИГРАТЬ
	BtnDocument->Visible = false; // ДОКУМЕНТАЦИЯ
	BtnRegulations->Visible = false; // ПРАВИЛА
}

// ---------------------------------------------------------------------------
// ТАЙМЕР, ПОВТОРЕНИЕ СОБЫТИЙ, ИНТЕРВАЛ 10 милисекунд
void __fastcall TGameForm::Timer1Timer(TObject *Sender) {
	// Проверка, если игра, то...
	if (game->game_)
	{
		// УСЛОЖНЕНИЕ, ДЕЛАЕТСЯ ВЫШЕ СКОРОСТЬ И МЕНЬШЕ РАССТОЯНИЕ МЕЖДУ МАШИНКАМИ
		// Условие, если проехали 50 машинок, если поделить на это число, не будет меньше нуля, И проверка,
		// чтобы сработало только один раз так как Таймер БЫСТРЫЙ
		if (countCarWin % countPlusSpeed == 0 && countCarWin / countPlusSpeed >=
			0 && countCarWin != defaultScore)
		{
			// скорость машинок на 1 больше
			speedCar++;
			// уменьшаем расстояние между машинками
			distanceByCar-=25;
			// записываем количество проехваших в спомогательную переменную
			defaultScore = countCarWin;
		}
		// запускаем счетчик времени спауна машинок
		time_spown[0]++;
		// если счетчик мпавна машинок больше 75, запускаем новую машинку
		if (time_spown[0] > 75) {
			// разрешаем запустить счетчик второй машинки
			nextCar = true;
		}
		// если можно новую машинку, запускаем счетчик ее спауна
		if (nextCar) {
			// запускаем счетчик спавна новой машинки
			time_spown[1]++;
		}
		// ПРОВЕРКА НА СТОЛКНОВЕНИЕ С ГРАНИЦАМИ КАРТЫ
		// СТОЛКНОВЕНИЕ С ЛЕВОЙ ГРАНИЦЕЙ
		if (game->gameObject[0]->GetLeftX() < 205)
		{
			// ОТТОЛКНОВЕНИЕ ОТ ГРАНИЦЫ НА 1 вправо
			game->gameObject[0]->newCoord = 1;
		}
		//  СТОЛКНОВЕНИЕ С ПРАВОЙ ГРАНИЦЕЙ
		if (game->gameObject[0]->GetLeftX() > 595)
		{
			// ОТТОЛКНОВЕНИЕ ОТ ГРАНИЦЫ ВЛЕВО НА 1
			game->gameObject[0]->newCoord = -1;
		}
		// ЕСЛИ СЧЕТЧИК НОВЫХ МАШИНОК БОЛЬШЕ 150
		if (time_spown[1] > 150) {
			// создаем рандомную координату
			int randomCoord = (rand() % 495) + 205;
			// если координата больше 495
			if (randomCoord > 495) {
				// присвоим координате самый край, МАШИНКА БУДЕТ В КРАЮ
				randomCoord = 595;
			}
			// удаление объекта машинки
			delete game->gameObject[7];
			// создание новой машинки, с новыми коодинатами
			game->gameObject[7] = new OpponentCar(randomCoord, 0, 1);//В СКОБОЧКАХ ПАРАМЕТРЫ КОНСТРУКТОРА, 0 - это Координата Верха
			// ПРОЕХАЛИ ОДНУ МАШИНКУ, СЧЕТЧИК ИНКРЕМЕНТИРУЕТСЯ (плюс 1)
			countCarWin++;
			// ОЧКИ + 1
			score++;
			// НАЧИНАЕМ ВРЕМЯ СПАВНА С НУЛЯ
			time_spown[1] = 0;
		}
		// ЕСЛИ ВРЕМЯ СПАУНА > 150
		if (time_spown[0] > 150) {
			// СЧЕТЧИК СПАВНА БОНУСА ПЛЮС 1
			bonusSpown++;
			// СОЗДАЕМ РАНДОМНУЮ КООРДИНАТУ ОТ 205 к 495
			int randomCoord = (rand() % 495) + 205;
			// если координата больше 49
			if (randomCoord > 495) {
			// присвоим координате самый край, МАШИНКА БУДЕТ В КРАЮ
				randomCoord = 595;
			}
			// удаляем объект машинку
			delete game->gameObject[5];
			// СОЗДАЕМ НОВУЮ МАШИНКУ
			game->gameObject[5] = new OpponentCar(randomCoord, 0, 2);//В СКОБОЧКАХ ПАРАМЕТРЫ КОНСТРУКТОРА, 0 - это Координата Верха
			// ПРОЕХАЛИ ОДНУ МАШИНКУ, СЧЕТЧИК ИНКРЕМЕНТИРУЕТСЯ (плюс 1)
			countCarWin++;
			// ОЧКИ + 1
			score++;
			// РАНДОМНО УЗНАЕМ ТИП БОНУСА ОТ 1 к 2
			int randBonus = 1 + rand() % 2;
			// ЕСЛИ ЛЕВАЯ КООРДИНАТА МАШИНКИ БОЛЬШЕ 400, ВТОРАЯ МАШИНКА БУДЕТ СЛЕВА
			if (game->gameObject[5]->GetLeftX() > 400) {
				// удаляем машинку вторую
				delete game->gameObject[6];
				//В СКОБОЧКАХ ПАРАМЕТРЫ КОНСТРУКТОРА, 0 - это Координата Верха
				game->gameObject[6] = new OpponentCar(randomCoord - distanceByCar, 0, 4);
				// ЕСЛИ СЧЕТЧИК СПАВНА = 3
				if (bonusSpown == 5) {
					// удаляем бонус
					delete game->gameObject[8];
					// создаем новый бонус
					game->gameObject[8] = new Bonus(randomCoord - 82, 0, randBonus);
					// БОНУС СПАВН СЧЕТЧИК = 0
					bonusSpown = 0;
				}
			}
		   // ЕСЛИ ЛЕВАЯ КООРДИНАТА МАШИНКИ БОЛЬШЕ 400, ВТОРАЯ МАШИНКА БУДЕТ СЛЕВА
			else {
				// удаляем машинку
				delete game->gameObject[6];
				// создаем машинку новую
				//В СКОБОЧКАХ ПАРАМЕТРЫ КОНСТРУКТОРА, 0 - это Координата Верха, 3 - тип машинки(картинка)
				game->gameObject[6] = new OpponentCar(randomCoord + distanceByCar, 0, 3);
				// ЕСЛИ СЧЕТЧИК СПАВНА БОНУСА = 3
				if (bonusSpown == 5) {
					// удалить бонус
					delete game->gameObject[8];
					// создать новый бонус
					game->gameObject[8] = new Bonus(randomCoord + 122, 0, randBonus);
					// Счетчик спвна  бонуса в 0
					bonusSpown = 0;
				}
			}
			// счетчик времени спавна машинок в 0
			time_spown[0] = 0;
		}
		// ЗАПУСКАЕМ ОСНОНУЮ ФУНКЦИЮ ИГРЫ, ПАРАМЕТР - speedCar - смещение машинок и бонуса
		game->GamePlay(speedCar);
		// Label1->Caption = IntToStr(score);
		// если нажата кнопка A
		if (state[0] == 1) {
			// СДВИГ МАШИНКИ ИГРОКА ВЛЕВО на 6
			game->gameObject[0]->newCoord = -6;
		}
			// если нажата кнопка D
		if (state[1] == 1) {
		// СДВИГ МАШИНКИ ИГРОКА ВПраВО на 6
			game->gameObject[0]->newCoord = 6;
		}
		// Если не нажаты, смещение = 0
		if (state[0] == 0 && state[1] == 0) {
			game->gameObject[0]->newCoord = 0;
		}
	}
	// ЕСли ПРОИГРАЛИ
	else {
		NOVisibleGameComponent();
		// удлаяем игру
		delete game;
		// СТАВИМ МУЗЫКУ НА ПАУЗУ
		MediaPlayer1->Pause();
		// ВЫКЛЮЧАЕМ ТАЦМЕР
		Timer1->Enabled = false;
		// ВЫКЛЮЧАЕМ ВИДИМОСТЬ КАРТИНКИ ИГРЫ
		Image2->Visible = false;
		// ВКЛЮЧАЕМ КАРТИНКИ МЕНЮ
		Image1->Visible = true;
	}
	// ВЫВОД ОЧКОВ НА ЭКРАН
	Label2->Caption = IntToStr(score);
	// Если переменная видимости бонуса = true
	if (lookBonus)
	{
		// включаем видимость картинки бонуса
		Image5->Visible = true;
	}
	// ИНАЧЕ
	else
	{   // выключаем видимость картинки бонуса
		Image5->Visible = false;
    }
}
// ---------------------------------------------------------------------------
// ПРИ СОЗДАНИИ ФОРМЫ
void __fastcall TGameForm::FormCreate(TObject *Sender) {
	// убрать мерцание картинок
	DoubleBuffered = true;
	// ОТКРЫВАЕМ ФАЙЛ С МУЗЫКОЙ, который лежит возле .exe
	MediaPlayer1->FileName = ExtractFileDir(Application->ExeName) +
		"\\phonkgame.wav";
	// открываем медиа плейер
	MediaPlayer1->Open();
	NOVisibleGameComponent();
}
// ---------------------------------------------------------------------------
// нажатия клавтуры
void __fastcall TGameForm::FormKeyDown(TObject *Sender, WORD &Key,
	TShiftState Shift)

{
	// Если клавиша А
	if (Key == 65) {
		// активно состояния смещения влево
		state[0] = 1;
	}
	// Если клавиша D
	if (Key == 68) {
		// активно состояния смещения впаво
		state[1] = 1;
	}
}
// ---------------------------------------------------------------------------

void __fastcall TGameForm::FormKeyUp(TObject *Sender, WORD &Key,
	TShiftState Shift)

{
	// Если клавиша А
	if (Key == 65) {
	// НЕ активно состояния смещения влево
		state[0] = 0;
	}
	// Если клавиша D
	if (Key == 68) {
	// НЕ активно состояния смещения вправо
		state[1] = 0;
	}
}
// ---------------------------------------------------------------------------
// КНОПКА ИГРАТЬ   НАЧАЛО ИГРЫ
void __fastcall TGameForm::BtnPlayClick(TObject *Sender)
{
	VisibleGameComponent();
	// ВКЛЮЧАЕМ КАРТИНКУ 2
	Image2->Visible = true;
	// Счетчики времени в 0
	time_spown[0] = 0;
	time_spown[1] = 0;
	// След машинка низя, FALSE
	nextCar = false;
	// Очки 0
	score = 0;
	// Сбиваем скорость
	speedCar = 8;
	// создаем новую игру
	game = new Game();
	// устанавливаем активность игры
	game->game_ = true;
	// Включаем вдимость вывода очков
	Label1->Visible = true;
	// Label2->Visible = true;
	// запускаем музыку
	MediaPlayer1->Play();
	// ставим интервал таймера
	Timer1->Interval = 10;
	// включаем таймер
	Timer1->Enabled = true;
}
// ---------------------------------------------------------------------------



